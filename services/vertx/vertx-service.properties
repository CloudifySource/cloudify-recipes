/*******************************************************************************
* Copyright (c) 2012 GigaSpaces Technologies Ltd. All rights reserved
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*       http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*******************************************************************************/
//The name of the service 
serviceName = "vertx"

//Vertx version 
version = "1.3.0"

javaVersion = "1.7.0_07"
Java32Url = "http://repository.cloudifysource.org/com/oracle/java/${javaVersion}/jdk-7u7-linux-i586.tar.gz"
Java64Url = "http://repository.cloudifysource.org/com/oracle/java/${javaVersion}/jdk-7u7-linux-x64.tar.gz"

//set this to true if you want to run Python apps with vertx. This will download and install Jython and
//make it available to vertx
installJython = true

jythonVersion = "2.5.3"
jythonUrl = "http://search.maven.org/remotecontent?filepath=org/python/jython-installer/${jythonVersion}/jython-installer-${jythonVersion}.jar"

//set this to true if you want to run Ruby apps with vertx. This will download and install JRuby and
//make it available to vertx
installJRuby = true

jrubyVersion = "1.7.0.preview2"
jrubyUrl = "http://jruby.org.s3.amazonaws.com/downloads/${jrubyVersion}/jruby-bin-${jrubyVersion}.zip"

/***** DON'T EDIT *****/
name = "vert.x-${version}.final"
zipName = "${name}.tar.gz"
javaUrl = System.properties["os.arch"]?.indexOf("64") != -1 ? Java64Url:Java32Url
/***** END DON'T EDIT *****/


//The port that the application listens to. Used to provide a link in the UI and configure load balancer. 
applicationPort = 8080

//the root URL of the application 
applicationRoot = "/"

//where to download the vertx distro from 
downloadPath = "http://repository.cloudifysource.org/org/vertx/${version}/${zipName}"

                
/*
   Controls the Vertx run mode. Can be one of 3:
   - "application" - which means that the recipe will try to download the application files from the URL
      specified in applicationZipUrl
   - "examples" - will use one of the built in examples. Note that not all examples will work on a remote server as some of them
                  bind to "localhost" and not "0.0.0.0" or another meaningful host name / address.
   - "mod" - will run a module with the name specified in the entryPoint property.
 */
runMode = "examples"

//the name of the application deployed to vertx 
applicationName = "python-http"

//Uncomment to specify the URL to download your application from (don't forget to set useExamples to false if you do that)
//applicationZipUrl = 

/*
   The entry point for your application. A module name in case you're running a module (see runMode above), or a script /
   Java class. If it's not a module, path is relative to <vertx root>/apps/${applicationName}, or to <vertx root>/examples
   folder in case running in "examples" mode.
*/
entryPoint = "python/http/http_server.py"

//enable this if you intend to deploy the service with an apache load balancer
useLoadBalancer=false

//the load balancer service name, e.g. "apacheLB"
loadBalancerServiceName="NO_LOAD_BALANCER_REQUIRED"


//Uncomment this to set the cluster port property (only relevant when cluster=true)
// clusterPort = 10001

//Uncomment this to set the clusterHost argument of vertx (only relevant when cluster=true)
// clusterHost

//the number of verticles to run for your app. If not set, defaults to the number of cores
// instance = 2

//set to true if you want to start your verticle as a worker verticle
worker = false

//whether or not to strat vertx in clustered mode
cluster = true

//clustering properties, only applied if cluster = true. Refer to vertx documentation for more details.
//By default tcp cluster is used with automatic assignment of cluster members based on the private IP
//addresses on the cloud
clusterConfig {
//    clusterGroupName = "vertx-cluster"
//    clusterGroupPassword =  "cluster-password"
    multicastEnabled = false
    tcpIpEnabled = true
    awsEnabled = false
//    awsAccessKey = ""
//    awsSecretKey = ""
//    awsRegion = "us-east-1"
}
